{
  "version": 3,
  "sources": ["../../vuetify/src/components/VIcon/VIcon.tsx"],
  "sourcesContent": ["// Styles\nimport './VIcon.sass'\n\n// Composables\nimport { useTextColor } from '@/composables/color'\nimport { makeComponentProps } from '@/composables/component'\nimport { IconValue, useIcon } from '@/composables/icons'\nimport { makeSizeProps, useSize } from '@/composables/size'\nimport { makeTagProps } from '@/composables/tag'\nimport { makeThemeProps, provideTheme } from '@/composables/theme'\n\n// Utilities\nimport { computed, ref, Text, toRef } from 'vue'\nimport { convertToUnit, flattenFragments, genericComponent, propsFactory, useRender } from '@/util'\n\nexport const makeVIconProps = propsFactory({\n  color: String,\n  disabled: Boolean,\n  start: Boolean,\n  end: Boolean,\n  icon: IconValue,\n\n  ...makeComponentProps(),\n  ...makeSizeProps(),\n  ...makeTagProps({ tag: 'i' }),\n  ...makeThemeProps(),\n}, 'VIcon')\n\nexport const VIcon = genericComponent()({\n  name: 'VIcon',\n\n  props: makeVIconProps(),\n\n  setup (props, { attrs, slots }) {\n    const slotIcon = ref<string>()\n\n    const { themeClasses } = provideTheme(props)\n    const { iconData } = useIcon(computed(() => slotIcon.value || props.icon))\n    const { sizeClasses } = useSize(props)\n    const { textColorClasses, textColorStyles } = useTextColor(toRef(props, 'color'))\n\n    useRender(() => {\n      const slotValue = slots.default?.()\n      if (slotValue) {\n        slotIcon.value = flattenFragments(slotValue).filter(node =>\n          node.type === Text && node.children && typeof node.children === 'string'\n        )[0]?.children as string\n      }\n      const hasClick = !!(attrs.onClick || attrs.onClickOnce)\n\n      return (\n        <iconData.value.component\n          tag={ props.tag }\n          icon={ iconData.value.icon }\n          class={[\n            'v-icon',\n            'notranslate',\n            themeClasses.value,\n            sizeClasses.value,\n            textColorClasses.value,\n            {\n              'v-icon--clickable': hasClick,\n              'v-icon--disabled': props.disabled,\n              'v-icon--start': props.start,\n              'v-icon--end': props.end,\n            },\n            props.class,\n          ]}\n          style={[\n            !sizeClasses.value ? ({\n              fontSize: convertToUnit(props.size),\n              height: convertToUnit(props.size),\n              width: convertToUnit(props.size),\n            }) : undefined,\n            textColorStyles.value,\n            props.style,\n          ]}\n          role={ hasClick ? 'button' : undefined }\n          aria-hidden={ !hasClick }\n          tabindex={ hasClick ? props.disabled ? -1 : 0 : undefined }\n        >\n          { slotValue }\n        </iconData.value.component>\n      )\n    })\n\n    return {}\n  },\n})\n\nexport type VIcon = InstanceType<typeof VIcon>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,OAAA;AAcO,IAAMA,iBAAiBC,aAAa;EACzCC,OAAOC;EACPC,UAAUC;EACVC,OAAOD;EACPE,KAAKF;EACLG,MAAMC;EAEN,GAAGC,mBAAmB;EACtB,GAAGC,cAAc;EACjB,GAAGC,aAAa;IAAEC,KAAK;EAAI,CAAC;EAC5B,GAAGC,eAAe;AACpB,GAAG,OAAO;AAEH,IAAMC,QAAQC,iBAAiB,EAAE;EACtCC,MAAM;EAENC,OAAOlB,eAAe;EAEtBmB,MAAOD,OAAKE,MAAoB;AAAA,QAAlB;MAAEC;MAAOC;IAAM,IAACF;AAC5B,UAAMG,WAAWC,IAAY;AAE7B,UAAM;MAAEC;IAAa,IAAIC,aAAaR,KAAK;AAC3C,UAAM;MAAES;IAAS,IAAIC,QAAQC,SAAS,MAAMN,SAASO,SAASZ,MAAMV,IAAI,CAAC;AACzE,UAAM;MAAEuB;IAAY,IAAIC,QAAQd,KAAK;AACrC,UAAM;MAAEe;MAAkBC;IAAgB,IAAIC,aAAaC,MAAMlB,OAAO,OAAO,CAAC;AAEhFmB,cAAU,MAAM;;AACd,YAAMC,aAAYhB,WAAMiB,YAANjB;AAClB,UAAIgB,WAAW;AACbf,iBAASO,SAAQU,sBAAiBF,SAAS,EAAEG,OAAOC,UAClDA,KAAKC,SAASC,QAAQF,KAAKG,YAAY,OAAOH,KAAKG,aAAa,QAClE,EAAE,OAFeL,mBAEXK;MACR;AACA,YAAMC,WAAW,CAAC,EAAEzB,MAAM0B,WAAW1B,MAAM2B;AAE3C,aAAAC,YAAAtB,SAAAG,MAAAoB,WAAA;QAAA,OAEUhC,MAAML;QAAG,QACRc,SAASG,MAAMtB;QAAI,SACnB,CACL,UACA,eACAiB,aAAaK,OACbC,YAAYD,OACZG,iBAAiBH,OACjB;UACE,qBAAqBgB;UACrB,oBAAoB5B,MAAMd;UAC1B,iBAAiBc,MAAMZ;UACvB,eAAeY,MAAMX;QACvB,GACAW,MAAMiC,KAAK;QACZ,SACM,CACL,CAACpB,YAAYD,QAAS;UACpBsB,UAAUC,cAAcnC,MAAMoC,IAAI;UAClCC,QAAQF,cAAcnC,MAAMoC,IAAI;UAChCE,OAAOH,cAAcnC,MAAMoC,IAAI;QACjC,IAAKG,QACLvB,gBAAgBJ,OAChBZ,MAAMwC,KAAK;QACZ,QACMZ,WAAW,WAAWW;QAAS,eACxB,CAACX;QAAQ,YACZA,WAAW5B,MAAMd,WAAW,KAAK,IAAIqD;MAAS,GAAA;QAAAlB,SAAAA,MAAA,CAEvDD,SAAS;MAAA,CAAA;IAGjB,CAAC;AAED,WAAO,CAAC;EACV;AACF,CAAC;",
  "names": ["makeVIconProps", "propsFactory", "color", "String", "disabled", "Boolean", "start", "end", "icon", "IconValue", "makeComponentProps", "makeSizeProps", "makeTagProps", "tag", "makeThemeProps", "VIcon", "genericComponent", "name", "props", "setup", "_ref", "attrs", "slots", "slotIcon", "ref", "themeClasses", "provideTheme", "iconData", "useIcon", "computed", "value", "sizeClasses", "useSize", "textColorClasses", "textColorStyles", "useTextColor", "toRef", "useRender", "slotValue", "default", "flattenFragments", "filter", "node", "type", "Text", "children", "hasClick", "onClick", "onClickOnce", "_createVNode", "component", "class", "fontSize", "convertToUnit", "size", "height", "width", "undefined", "style"]
}
