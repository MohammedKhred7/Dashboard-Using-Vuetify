{
  "version": 3,
  "sources": ["../../vuetify/src/components/VFileInput/VFileInput.tsx"],
  "sourcesContent": ["// Styles\nimport './VFileInput.sass'\n\n// Components\nimport { VChip } from '@/components/VChip'\nimport { VCounter } from '@/components/VCounter'\nimport { VField } from '@/components/VField'\nimport { filterFieldProps, makeVFieldProps } from '@/components/VField/VField'\nimport { makeVInputProps, VInput } from '@/components/VInput/VInput'\n\n// Composables\nimport { useFocus } from '@/composables/focus'\nimport { forwardRefs } from '@/composables/forwardRefs'\nimport { useLocale } from '@/composables/locale'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { computed, nextTick, ref, watch } from 'vue'\nimport {\n  callEvent,\n  filterInputAttrs,\n  genericComponent,\n  humanReadableFileSize,\n  propsFactory,\n  useRender,\n  wrapInArray,\n} from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VFieldSlots } from '@/components/VField/VField'\nimport type { VInputSlots } from '@/components/VInput/VInput'\n\nexport type VFileInputSlots = VInputSlots & VFieldSlots & {\n  counter: never\n  selection: {\n    fileNames: string[]\n    totalBytes: number\n    totalBytesReadable: string\n  }\n}\n\nexport const makeVFileInputProps = propsFactory({\n  chips: Boolean,\n  counter: Boolean,\n  counterSizeString: {\n    type: String,\n    default: '$vuetify.fileInput.counterSize',\n  },\n  counterString: {\n    type: String,\n    default: '$vuetify.fileInput.counter',\n  },\n  multiple: Boolean,\n  showSize: {\n    type: [Boolean, Number, String] as PropType<boolean | 1000 | 1024>,\n    default: false,\n    validator: (v: boolean | number) => {\n      return (\n        typeof v === 'boolean' ||\n        [1000, 1024].includes(Number(v))\n      )\n    },\n  },\n\n  ...makeVInputProps({ prependIcon: '$file' }),\n\n  modelValue: {\n    type: [Array, Object] as PropType<File[] | File>,\n    default: (props: any) => props.multiple ? [] : null,\n    validator: (val: any) => {\n      return wrapInArray(val).every(v => v != null && typeof v === 'object')\n    },\n  },\n\n  ...makeVFieldProps({ clearable: true }),\n}, 'VFileInput')\n\nexport const VFileInput = genericComponent<VFileInputSlots>()({\n  name: 'VFileInput',\n\n  inheritAttrs: false,\n\n  props: makeVFileInputProps(),\n\n  emits: {\n    'click:control': (e: MouseEvent) => true,\n    'mousedown:control': (e: MouseEvent) => true,\n    'update:focused': (focused: boolean) => true,\n    'update:modelValue': (files: File[]) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const { t } = useLocale()\n    const model = useProxiedModel(\n      props,\n      'modelValue',\n      props.modelValue,\n      val => wrapInArray(val),\n      val => (props.multiple || Array.isArray(props.modelValue)) ? val : val[0],\n    )\n    const { isFocused, focus, blur } = useFocus(props)\n    const base = computed(() => typeof props.showSize !== 'boolean' ? props.showSize : undefined)\n    const totalBytes = computed(() => (model.value ?? []).reduce((bytes, { size = 0 }) => bytes + size, 0))\n    const totalBytesReadable = computed(() => humanReadableFileSize(totalBytes.value, base.value))\n\n    const fileNames = computed(() => (model.value ?? []).map(file => {\n      const { name = '', size = 0 } = file\n\n      return !props.showSize\n        ? name\n        : `${name} (${humanReadableFileSize(size, base.value)})`\n    }))\n\n    const counterValue = computed(() => {\n      const fileCount = model.value?.length ?? 0\n      if (props.showSize) return t(props.counterSizeString, fileCount, totalBytesReadable.value)\n      else return t(props.counterString, fileCount)\n    })\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      isFocused.value ||\n      props.active\n    ))\n    const isPlainOrUnderlined = computed(() => ['plain', 'underlined'].includes(props.variant))\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) focus()\n    }\n    function onClickPrepend (e: MouseEvent) {\n      inputRef.value?.click()\n    }\n    function onControlMousedown (e: MouseEvent) {\n      emit('mousedown:control', e)\n    }\n    function onControlClick (e: MouseEvent) {\n      inputRef.value?.click()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = []\n\n        callEvent(props['onClick:clear'], e)\n      })\n    }\n\n    watch(model, newValue => {\n      const hasModelReset = !Array.isArray(newValue) || !newValue.length\n\n      if (hasModelReset && inputRef.value) {\n        inputRef.value.value = ''\n      }\n    })\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter)\n      const hasDetails = !!(hasCounter || slots.details)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const { modelValue: _, ...inputProps } = VInput.filterProps(props)\n      const fieldProps = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-file-input',\n            {\n              'v-file-input--chips': !!props.chips,\n              'v-input--plain-underlined': isPlainOrUnderlined.value,\n            },\n            props.class,\n          ]}\n          style={ props.style }\n          onClick:prepend={ onClickPrepend }\n          { ...rootAttrs }\n          { ...inputProps }\n          centerAffix={ !isPlainOrUnderlined.value }\n          focused={ isFocused.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              id,\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                prepend-icon={ props.prependIcon }\n                onMousedown={ onControlMousedown }\n                onClick={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ props['onClick:prependInner'] }\n                onClick:appendInner={ props['onClick:appendInner'] }\n                { ...fieldProps }\n                id={ id.value }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value }\n                disabled={ isDisabled.value }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => (\n                    <>\n                      <input\n                        ref={ inputRef }\n                        type=\"file\"\n                        readonly={ isReadonly.value }\n                        disabled={ isDisabled.value }\n                        multiple={ props.multiple }\n                        name={ props.name }\n                        onClick={ e => {\n                          e.stopPropagation()\n\n                          if (isReadonly.value) e.preventDefault()\n\n                          onFocus()\n                        }}\n                        onChange={ e => {\n                          if (!e.target) return\n\n                          const target = e.target as HTMLInputElement\n                          model.value = [...target.files ?? []]\n                        }}\n                        onFocus={ onFocus }\n                        onBlur={ blur }\n                        { ...slotProps }\n                        { ...inputAttrs }\n                      />\n\n                      <div class={ fieldClass }>\n                        { !!model.value?.length && (\n                          slots.selection ? slots.selection({\n                            fileNames: fileNames.value,\n                            totalBytes: totalBytes.value,\n                            totalBytesReadable: totalBytesReadable.value,\n                          })\n                          : props.chips ? fileNames.value.map(text => (\n                            <VChip\n                              key={ text }\n                              size=\"small\"\n                              text={ text }\n                            />\n                          ))\n                          : fileNames.value.join(', ')\n                        )}\n                      </div>\n                    </>\n                  ),\n                }}\n              </VField>\n            ),\n            details: hasDetails ? slotProps => (\n              <>\n                { slots.details?.(slotProps) }\n\n                { hasCounter && (\n                  <>\n                    <span />\n\n                    <VCounter\n                      active={ !!model.value?.length }\n                      value={ counterValue.value }\n                      v-slots:default={ slots.counter }\n                    />\n                  </>\n                )}\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return forwardRefs({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VFileInput = InstanceType<typeof VFileInput>\n"],
  "mappings": "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",
  "names": ["makeVFileInputProps", "propsFactory", "chips", "Boolean", "counter", "counterSizeString", "type", "String", "default", "counterString", "multiple", "showSize", "Number", "validator", "v", "includes", "makeVInputProps", "prependIcon", "modelValue", "Array", "Object", "props", "val", "wrapInArray", "every", "makeVFieldProps", "clearable", "VFileInput", "genericComponent", "name", "inheritAttrs", "emits", "e", "focused", "files", "setup", "_ref", "attrs", "emit", "slots", "t", "useLocale", "model", "useProxiedModel", "isArray", "isFocused", "focus", "blur", "useFocus", "base", "computed", "undefined", "totalBytes", "value", "reduce", "bytes", "_ref2", "size", "totalBytesReadable", "humanReadableFileSize", "fileNames", "map", "file", "counterValue", "fileCount", "length", "vInputRef", "ref", "vFieldRef", "inputRef", "isActive", "active", "isPlainOrUnderlined", "variant", "onFocus", "document", "activeElement", "onClickPrepend", "click", "onControlMousedown", "onControlClick", "onClear", "stopPropagation", "nextTick", "callEvent", "watch", "newValue", "hasModelReset", "useRender", "hasCounter", "hasDetails", "details", "rootAttrs", "inputAttrs", "filterInputAttrs", "_", "inputProps", "VInput", "filterProps", "fieldProps", "filterFieldProps", "_createVNode", "_mergeProps", "$event", "class", "style", "_ref3", "id", "isDisabled", "isDirty", "isReadonly", "isValid", "VField", "_ref4", "fieldClass", "slotProps", "_Fragment", "preventDefault", "target", "selection", "text", "VChip", "join", "VCounter", "forwardRefs"]
}
